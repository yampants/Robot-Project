
#include <FEHLCD.h>
#include <FEHServo.h>
#include <FEHMotor.h>
#include <FEHUtility.h>
#include <FEHIO.h>
#include <FEHRPS.h>

#define red .46

//Declare 2 igwan motors to motor ports
FEHMotor left_motor(FEHMotor::Motor0,9.0);  
FEHMotor right_motor(FEHMotor::Motor1,9.0);  
DigitalEncoder right_encoder(FEHIO::P1_0);
DigitalEncoder left_encoder(FEHIO::P1_1);

//Declares the arm servos
FEHServo kickServo(FEHServo::Servo7);
FEHServo arm(FEHServo::Servo0);
FEHServo lever(FEHServo::Servo1);

//Declares bump switches
DigitalInputPin FL(FEHIO::P3_0);
DigitalInputPin FR(FEHIO::P0_0);

//Function that calculates average voltage value of CDS cell 0-3.3 V
float lightValue(){
    //Declare input to cds cell
AnalogInputPin cds(FEHIO::P2_0);
int i=0;
float sum=0;
float a=0;
float average=0;
//Loop runs through 10 times to measure cds cell output
while(i<10){
    //Find value and add it to running sum
     a= cds.Value();
     sum=sum+a;
     i++;
     //Sleep 10 ms
     Sleep(10);
  


}
//calculate average value and return said value

average=sum/10;
return average;

}

void forward(){ 
    
   left_motor.SetPercent(-25);
   right_motor.SetPercent(25);


}
void turnLeft(){ 
    
   left_motor.SetPercent(0);

   right_motor.SetPercent(25);





}

void turnRight(){ 

    

   left_motor.SetPercent(-25);
   right_motor.SetPercent(0);


}
void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(-(percent+3));

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_forward_ramp(int percent1, int percent2, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent1);
    left_motor.SetPercent(-percent2);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void move_backward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-percent-3);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}
void move_backward_ramp(int percent1, int percent2, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-percent1);
    left_motor.SetPercent(percent2);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

void turn_left(int percent, int counts)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(right_encoder.Counts() < counts);
    //Turn off motors
    right_motor.Stop();

}
void turn_left_backward(int percent, int counts)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(right_encoder.Counts() < counts);
    //Turn off motors
    right_motor.Stop();

}
void turn_right(int percent, int counts)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < counts);

    //Turn off motors
    left_motor.Stop();

}
void turn_right_backward(int percent, int counts)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < counts);

    //Turn off motors
    left_motor.Stop();

}

void reverse_after_red(int percent)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(percent);
    right_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts())/2 < 200);

    //Turn off motors
    left_motor.Stop();
    right_motor.Stop();

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < 300);

    //Turn off motors
    left_motor.Stop();
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(percent);
    right_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts())/2 < 200);

    //Turn off motors
    left_motor.Stop();
    right_motor.Stop();

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < 195);

    //Turn off motors
    left_motor.Stop();

}
void reverse_after_blue(int percent)
{
     //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(percent);
    right_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts())/2 < 200);

    //Turn off motors
    left_motor.Stop();
    right_motor.Stop();

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < 300);

    //Turn off motors
    left_motor.Stop();
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(percent);
    right_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts())/2 < 200);

    //Turn off motors
    left_motor.Stop();
    right_motor.Stop();

    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    left_motor.SetPercent(-percent);
    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(left_encoder.Counts() < 180);

    //Turn off motors
    left_motor.Stop();

}

void move_toward_jukebox (int a){
    move_forward(25,50);
      
    turn_left(25,40);
      
    move_forward_ramp(30, 32,750);
    turn_left(25,260);
      
    while (FL.Value()||FR.Value()){
        move_forward(30,25);
    }
    move_backward(25,325);
      
    turn_left(25,585);
      
    move_backward_ramp(22, 24, 120);
      
}

void servo_kick(float degree){
    kickServo.SetMin(630);
    kickServo.SetMax(2400);

    kickServo.SetDegree(degree);

      
}

void servo_arm(float degree){
    arm.SetMin(800);
    arm.SetMax(2314);

    arm.SetDegree(degree);

      
}

void servo_lever(float degree){
    lever.SetMin(550);
    lever.SetMax(2484);

    lever.SetDegree(degree);

      
}


void tray(){
    /*
    move_forward(25, 700);
      
    turn_right(30, 240);
      
    move_backward(25,50);
    Sleep(.5);
    */
    move_forward_ramp(40,45,850);
      
    turn_left(25,50);
    move_forward_ramp(40,45,440);
    //move_forward(25,250);
      
    turn_left(25,500);
      
    move_forward(25,50);
    turn_left(25,520);
    servo_kick(180);
    servo_arm(90);
    while (FL.Value()||FR.Value()){
        move_forward(30,5);
    }
    servo_kick(90);
      
}

void reverse_tray(){
    move_backward(25, 400);
    turn_left(25, 560);

    while (FL.Value()||FR.Value()){
        move_forward(30,5);
    }
    move_backward(25,220);
      
    turn_right(25,450);
      
    servo_arm(0);
    servo_lever(80);
    servo_kick(30);
    move_backward_ramp(30, 32,585);
    servo_arm(120);
    Sleep(0.5);
    servo_arm(0);
    servo_lever(160);
    //  
    //LCD.WriteLine("It hap");
    servo_arm(140);
    servo_lever(90);
    servo_arm(30);
    move_forward(20, 60);
    servo_lever(160);
    turn_right(25, 545);
    servo_kick(0);
    while (FL.Value()||FR.Value()){
        move_forward_ramp(25,28, 5);
    }
}

void turn_ticket(){
    move_backward(25,175);
    turn_left(25,550); //535
    servo_arm(9);
    move_backward_ramp(30, 33, 680);
    turn_right(30,300);
    move_forward(20,50);
    turn_left(30,350);
    while (FL.Value()){
        move_forward(25,50);
    }
}

void burger(){
    move_forward(25, 115);
      
    turn_left(25,50);
      
    move_forward(25, 560);
      
    turn_right(30, 220);
      
    move_backward(25,50);
    Sleep(.5);
    move_forward_ramp(40,45,1290);
      
    servo_arm(180);
    servo_arm(90);
      
    turn_right(25,450);
      
    while (FL.Value()||FR.Value()){
        move_forward(25,25);
    }
    move_backward(25,220);
      
    turn_right(25,450);
      
    servo_arm(0);
    servo_lever(80);
    servo_kick(30);
   
    move_backward_ramp(27, 29,555);
    servo_arm(120);
      
    servo_lever(165);
    servo_arm(140);
    servo_lever(90);
    servo_arm(20);
    move_forward(20, 30);
    turn_right(25, 565);
    move_forward(25,430);
    servo_kick(130);
}

void vanilla(){
    turn_left(25,10);
    move_forward(25, 230);
    servo_kick(115);
    Sleep(0.5);
}

void swirl(){
    turn_right(25, 100);
    move_forward(25, 215);
    servo_kick(115);
    Sleep(0.5);
}

void chocolate(){
    turn_right(25,225);
    move_forward(25, 230);
    servo_kick(115);
    Sleep(0.5);
}

void icecream(){
    move_backward_ramp(23,26,350);
    turn_right(25,220);
    move_backward_ramp(23,26,140);
}

void after_icecream(){
    move_backward_ramp(23,26,80);
    servo_kick(140);
    Sleep(2.0);
    move_forward_ramp(23,26,80);
    servo_kick(95);
    servo_kick(130);
}

void endbutton_swirl(){
    move_backward(30, 600);
    turn_left(25, 315);
    move_backward(30, 330);
    turn_left(25,620);
    move_forward_ramp(23, 26, 900);
    turn_left(25, 270);
    //move_forward_ramp(23,26, 600);
}

void endbutton_chocolate(){
    move_backward(30, 600);
    turn_left(25, 455);
    move_backward(30, 470);
    turn_left(25,620);
    move_forward_ramp(23, 26, 900);
    turn_left(25, 270);
    //move_forward_ramp(23,26, 600);
}

void endbutton_vanilla(){
    move_backward(30, 600);
    turn_left(25, 235);
    move_backward(30, 140);
    turn_left(25,600);
    move_forward_ramp(23, 26, 900);
    turn_left(25, 270);
    //move_forward_ramp(23,26, 600);
}

void ticket_after_ice(){
    turn_left(30, 270);
    while (FL.Value()||FR.Value()){
        move_forward(25, 2);
    }
    move_backward(30, 180);
    turn_right(30, 510);
    servo_arm(170);
    servo_lever(82);
    move_backward_ramp(25,28,570);
    turn_left(30,150);
    turn_right(30,150);
    move_forward(30, 300);
    turn_right(30,100);
    move_forward(30, 50);
    turn_left(30, 100);
    move_forward(30,300);
}

int main(void)
{

    RPS.InitializeTouchMenu();

    /* conversion between inches traveled and number of transitions for shaft encoder:
    n = (inches*318)/(2*pi*r)
    (put the "n" value into the code)

    446 counts to turn 90 degrees
    */

    bool go = true;

    while (go == true){

        float a = lightValue();
        LCD.WriteLine(a);
        
        int starttime = 0;
        starttime++;

        if (a<=red || starttime > 200){
            move_toward_jukebox(a);
            a = lightValue();
            LCD.WriteLine(a);
            turn_right(25,5);
            move_forward_ramp(33,36,270);
            if(a>=.150&&a<=.360){
                LCD.WriteLine("Red");
                turn_left(25,25);
                 
                move_forward(35,60);
                  
                reverse_after_red(25);
            }
            else if (a>=.390&&a<=.860){
                LCD.WriteLine("Blue");
                turn_right(25,10);
                move_forward(35,60);
                  
                reverse_after_blue(25);
            }else{
                LCD.WriteLine("No Light");
                  
                move_forward(35,90);
                  
                reverse_after_blue(25);
            }
            move_backward_ramp(22,25,500);
            turn_right(30,530);
            tray();
            reverse_tray();
            //turn_ticket();
            //burger();
            icecream();
            
            if (RPS.GetIceCream() == 0){
                vanilla();
                after_icecream();
                endbutton_vanilla();
            }else if (RPS.GetIceCream() == 2){
                chocolate();
                after_icecream();
                endbutton_chocolate();
            }else{
                swirl();
                after_icecream();
                endbutton_swirl();
            }

            ticket_after_ice();

           go = false;
        }
        Sleep(0.1);
    }
}
